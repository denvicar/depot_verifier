// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_manifest.proto

#include "content_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sha_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.crc_)*/0u
  , /*decltype(_impl_.cb_original_)*/0u
  , /*decltype(_impl_.cb_compressed_)*/0u} {}
struct ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal() {}
  union {
    ContentManifestPayload_FileMapping_ChunkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal _ContentManifestPayload_FileMapping_ChunkData_default_instance_;
PROTOBUF_CONSTEXPR ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chunks_)*/{}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha_content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linktarget_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.flags_)*/0u} {}
struct ContentManifestPayload_FileMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentManifestPayload_FileMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentManifestPayload_FileMappingDefaultTypeInternal() {}
  union {
    ContentManifestPayload_FileMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentManifestPayload_FileMappingDefaultTypeInternal _ContentManifestPayload_FileMapping_default_instance_;
PROTOBUF_CONSTEXPR ContentManifestPayload::ContentManifestPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mappings_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContentManifestPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentManifestPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentManifestPayloadDefaultTypeInternal() {}
  union {
    ContentManifestPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentManifestPayloadDefaultTypeInternal _ContentManifestPayload_default_instance_;
PROTOBUF_CONSTEXPR ContentManifestMetadata::ContentManifestMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gid_manifest_)*/uint64_t{0u}
  , /*decltype(_impl_.depot_id_)*/0u
  , /*decltype(_impl_.creation_time_)*/0u
  , /*decltype(_impl_.cb_disk_original_)*/uint64_t{0u}
  , /*decltype(_impl_.filenames_encrypted_)*/false
  , /*decltype(_impl_.unique_chunks_)*/0u
  , /*decltype(_impl_.cb_disk_compressed_)*/uint64_t{0u}
  , /*decltype(_impl_.crc_encrypted_)*/0u
  , /*decltype(_impl_.crc_clear_)*/0u} {}
struct ContentManifestMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentManifestMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentManifestMetadataDefaultTypeInternal() {}
  union {
    ContentManifestMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentManifestMetadataDefaultTypeInternal _ContentManifestMetadata_default_instance_;
PROTOBUF_CONSTEXPR ContentManifestSignature::ContentManifestSignature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ContentManifestSignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentManifestSignatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentManifestSignatureDefaultTypeInternal() {}
  union {
    ContentManifestSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentManifestSignatureDefaultTypeInternal _ContentManifestSignature_default_instance_;
PROTOBUF_CONSTEXPR ContentDeltaChunks_DeltaChunk::ContentDeltaChunks_DeltaChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sha_source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha_target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_original_)*/0u
  , /*decltype(_impl_.patch_method_)*/0u
  , /*decltype(_impl_.size_delta_)*/0u} {}
struct ContentDeltaChunks_DeltaChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentDeltaChunks_DeltaChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentDeltaChunks_DeltaChunkDefaultTypeInternal() {}
  union {
    ContentDeltaChunks_DeltaChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentDeltaChunks_DeltaChunkDefaultTypeInternal _ContentDeltaChunks_DeltaChunk_default_instance_;
PROTOBUF_CONSTEXPR ContentDeltaChunks::ContentDeltaChunks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deltachunks_)*/{}
  , /*decltype(_impl_.manifest_id_source_)*/uint64_t{0u}
  , /*decltype(_impl_.manifest_id_target_)*/uint64_t{0u}
  , /*decltype(_impl_.depot_id_)*/0u
  , /*decltype(_impl_.chunk_data_location_)*/0} {}
struct ContentDeltaChunksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentDeltaChunksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentDeltaChunksDefaultTypeInternal() {}
  union {
    ContentDeltaChunks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentDeltaChunksDefaultTypeInternal _ContentDeltaChunks_default_instance_;
static ::_pb::Metadata file_level_metadata_content_5fmanifest_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_content_5fmanifest_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_content_5fmanifest_2eproto = nullptr;

const uint32_t TableStruct_content_5fmanifest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _impl_.sha_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _impl_.crc_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _impl_.cb_original_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _impl_.cb_compressed_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _impl_.sha_filename_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _impl_.sha_content_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _impl_.chunks_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _impl_.linktarget_),
  0,
  4,
  5,
  1,
  2,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload, _impl_.mappings_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.depot_id_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.gid_manifest_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.creation_time_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.filenames_encrypted_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.cb_disk_original_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.cb_disk_compressed_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.unique_chunks_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.crc_encrypted_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _impl_.crc_clear_),
  1,
  0,
  2,
  4,
  3,
  6,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ContentManifestSignature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestSignature, _impl_.signature_),
  0,
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _impl_.sha_source_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _impl_.sha_target_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _impl_.size_original_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _impl_.patch_method_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _impl_.chunk_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _impl_.size_delta_),
  0,
  1,
  3,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _impl_.depot_id_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _impl_.manifest_id_source_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _impl_.manifest_id_target_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _impl_.deltachunks_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _impl_.chunk_data_location_),
  2,
  0,
  1,
  ~0u,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::ContentManifestPayload_FileMapping_ChunkData)},
  { 16, 29, -1, sizeof(::ContentManifestPayload_FileMapping)},
  { 36, -1, -1, sizeof(::ContentManifestPayload)},
  { 43, 58, -1, sizeof(::ContentManifestMetadata)},
  { 67, 74, -1, sizeof(::ContentManifestSignature)},
  { 75, 87, -1, sizeof(::ContentDeltaChunks_DeltaChunk)},
  { 93, 104, -1, sizeof(::ContentDeltaChunks)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ContentManifestPayload_FileMapping_ChunkData_default_instance_._instance,
  &::_ContentManifestPayload_FileMapping_default_instance_._instance,
  &::_ContentManifestPayload_default_instance_._instance,
  &::_ContentManifestMetadata_default_instance_._instance,
  &::_ContentManifestSignature_default_instance_._instance,
  &::_ContentDeltaChunks_DeltaChunk_default_instance_._instance,
  &::_ContentDeltaChunks_default_instance_._instance,
};

const char descriptor_table_protodef_content_5fmanifest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026content_manifest.proto\"\357\002\n\026ContentMani"
  "festPayload\0225\n\010mappings\030\001 \003(\0132#.ContentM"
  "anifestPayload.FileMapping\032\235\002\n\013FileMappi"
  "ng\022\020\n\010filename\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\r\n\005fl"
  "ags\030\003 \001(\r\022\024\n\014sha_filename\030\004 \001(\014\022\023\n\013sha_c"
  "ontent\030\005 \001(\014\022=\n\006chunks\030\006 \003(\0132-.ContentMa"
  "nifestPayload.FileMapping.ChunkData\022\022\n\nl"
  "inktarget\030\007 \001(\t\032a\n\tChunkData\022\013\n\003sha\030\001 \001("
  "\014\022\013\n\003crc\030\002 \001(\007\022\016\n\006offset\030\003 \001(\004\022\023\n\013cb_ori"
  "ginal\030\004 \001(\r\022\025\n\rcb_compressed\030\005 \001(\r\"\354\001\n\027C"
  "ontentManifestMetadata\022\020\n\010depot_id\030\001 \001(\r"
  "\022\024\n\014gid_manifest\030\002 \001(\004\022\025\n\rcreation_time\030"
  "\003 \001(\r\022\033\n\023filenames_encrypted\030\004 \001(\010\022\030\n\020cb"
  "_disk_original\030\005 \001(\004\022\032\n\022cb_disk_compress"
  "ed\030\006 \001(\004\022\025\n\runique_chunks\030\007 \001(\r\022\025\n\rcrc_e"
  "ncrypted\030\010 \001(\r\022\021\n\tcrc_clear\030\t \001(\r\"-\n\030Con"
  "tentManifestSignature\022\021\n\tsignature\030\001 \001(\014"
  "\"\204\003\n\022ContentDeltaChunks\022\020\n\010depot_id\030\001 \001("
  "\r\022\032\n\022manifest_id_source\030\002 \001(\004\022\032\n\022manifes"
  "t_id_target\030\003 \001(\004\0223\n\013deltaChunks\030\004 \003(\0132\036"
  ".ContentDeltaChunks.DeltaChunk\022h\n\023chunk_"
  "data_location\030\005 \001(\0162\037.EContentDeltaChunk"
  "DataLocation:*k_EContentDeltaChunkDataLo"
  "cationInProtobuf\032\204\001\n\nDeltaChunk\022\022\n\nsha_s"
  "ource\030\001 \001(\014\022\022\n\nsha_target\030\002 \001(\014\022\025\n\rsize_"
  "original\030\003 \001(\r\022\024\n\014patch_method\030\004 \001(\r\022\r\n\005"
  "chunk\030\005 \001(\014\022\022\n\nsize_delta\030\006 \001(\r*\203\001\n\036ECon"
  "tentDeltaChunkDataLocation\022.\n*k_EContent"
  "DeltaChunkDataLocationInProtobuf\020\000\0221\n-k_"
  "EContentDeltaChunkDataLocationAfterProto"
  "buf\020\001B\005H\001\200\001\000"
  ;
static ::_pbi::once_flag descriptor_table_content_5fmanifest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_content_5fmanifest_2eproto = {
    false, false, 1212, descriptor_table_protodef_content_5fmanifest_2eproto,
    "content_manifest.proto",
    &descriptor_table_content_5fmanifest_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_content_5fmanifest_2eproto::offsets,
    file_level_metadata_content_5fmanifest_2eproto, file_level_enum_descriptors_content_5fmanifest_2eproto,
    file_level_service_descriptors_content_5fmanifest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_content_5fmanifest_2eproto_getter() {
  return &descriptor_table_content_5fmanifest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_content_5fmanifest_2eproto(&descriptor_table_content_5fmanifest_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentDeltaChunkDataLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_content_5fmanifest_2eproto);
  return file_level_enum_descriptors_content_5fmanifest_2eproto[0];
}
bool EContentDeltaChunkDataLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ContentManifestPayload_FileMapping_ChunkData::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentManifestPayload_FileMapping_ChunkData>()._impl_._has_bits_);
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cb_original(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cb_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContentManifestPayload.FileMapping.ChunkData)
}
ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(const ContentManifestPayload_FileMapping_ChunkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContentManifestPayload_FileMapping_ChunkData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sha_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.crc_){}
    , decltype(_impl_.cb_original_){}
    , decltype(_impl_.cb_compressed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sha_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha()) {
    _this->_impl_.sha_.Set(from._internal_sha(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cb_compressed_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.cb_compressed_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload.FileMapping.ChunkData)
}

inline void ContentManifestPayload_FileMapping_ChunkData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sha_){}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.crc_){0u}
    , decltype(_impl_.cb_original_){0u}
    , decltype(_impl_.cb_compressed_){0u}
  };
  _impl_.sha_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContentManifestPayload_FileMapping_ChunkData::~ContentManifestPayload_FileMapping_ChunkData() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload.FileMapping.ChunkData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentManifestPayload_FileMapping_ChunkData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sha_.Destroy();
}

void ContentManifestPayload_FileMapping_ChunkData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContentManifestPayload_FileMapping_ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload.FileMapping.ChunkData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sha_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cb_compressed_) -
        reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.cb_compressed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestPayload_FileMapping_ChunkData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sha();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 crc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_crc(&has_bits);
          _impl_.crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cb_original = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cb_original(&has_bits);
          _impl_.cb_original_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cb_compressed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cb_compressed(&has_bits);
          _impl_.cb_compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestPayload_FileMapping_ChunkData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload.FileMapping.ChunkData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes sha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sha(), target);
  }

  // optional fixed32 crc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_crc(), target);
  }

  // optional uint64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset(), target);
  }

  // optional uint32 cb_original = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cb_original(), target);
  }

  // optional uint32 cb_compressed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cb_compressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload.FileMapping.ChunkData)
  return target;
}

size_t ContentManifestPayload_FileMapping_ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload.FileMapping.ChunkData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes sha = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha());
    }

    // optional uint64 offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
    }

    // optional fixed32 crc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 cb_original = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cb_original());
    }

    // optional uint32 cb_compressed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cb_compressed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestPayload_FileMapping_ChunkData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContentManifestPayload_FileMapping_ChunkData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestPayload_FileMapping_ChunkData::GetClassData() const { return &_class_data_; }


void ContentManifestPayload_FileMapping_ChunkData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContentManifestPayload_FileMapping_ChunkData*>(&to_msg);
  auto& from = static_cast<const ContentManifestPayload_FileMapping_ChunkData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload.FileMapping.ChunkData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sha(from._internal_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.crc_ = from._impl_.crc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cb_original_ = from._impl_.cb_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cb_compressed_ = from._impl_.cb_compressed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestPayload_FileMapping_ChunkData::CopyFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload.FileMapping.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping_ChunkData::IsInitialized() const {
  return true;
}

void ContentManifestPayload_FileMapping_ChunkData::InternalSwap(ContentManifestPayload_FileMapping_ChunkData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha_, lhs_arena,
      &other->_impl_.sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, _impl_.cb_compressed_)
      + sizeof(ContentManifestPayload_FileMapping_ChunkData::_impl_.cb_compressed_)
      - PROTOBUF_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestPayload_FileMapping_ChunkData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[0]);
}

// ===================================================================

class ContentManifestPayload_FileMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentManifestPayload_FileMapping>()._impl_._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sha_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sha_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linktarget(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContentManifestPayload.FileMapping)
}
ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(const ContentManifestPayload_FileMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContentManifestPayload_FileMapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_){from._impl_.chunks_}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.sha_filename_){}
    , decltype(_impl_.sha_content_){}
    , decltype(_impl_.linktarget_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_filename()) {
    _this->_impl_.sha_filename_.Set(from._internal_sha_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_content()) {
    _this->_impl_.sha_content_.Set(from._internal_sha_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.linktarget_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linktarget_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_linktarget()) {
    _this->_impl_.linktarget_.Set(from._internal_linktarget(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload.FileMapping)
}

inline void ContentManifestPayload_FileMapping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_){arena}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.sha_filename_){}
    , decltype(_impl_.sha_content_){}
    , decltype(_impl_.linktarget_){}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.flags_){0u}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linktarget_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linktarget_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContentManifestPayload_FileMapping::~ContentManifestPayload_FileMapping() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload.FileMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentManifestPayload_FileMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunks_.~RepeatedPtrField();
  _impl_.filename_.Destroy();
  _impl_.sha_filename_.Destroy();
  _impl_.sha_content_.Destroy();
  _impl_.linktarget_.Destroy();
}

void ContentManifestPayload_FileMapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContentManifestPayload_FileMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload.FileMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sha_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sha_content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.linktarget_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestPayload_FileMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ContentManifestPayload.FileMapping.filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sha_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sha_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string linktarget = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_linktarget();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ContentManifestPayload.FileMapping.linktarget");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestPayload_FileMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload.FileMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ContentManifestPayload.FileMapping.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint64 size = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional bytes sha_filename = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha_filename(), target);
  }

  // optional bytes sha_content = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sha_content(), target);
  }

  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string linktarget = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_linktarget().data(), static_cast<int>(this->_internal_linktarget().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ContentManifestPayload.FileMapping.linktarget");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_linktarget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload.FileMapping)
  return target;
}

size_t ContentManifestPayload_FileMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload.FileMapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->_impl_.chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes sha_filename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_filename());
    }

    // optional bytes sha_content = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_content());
    }

    // optional string linktarget = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linktarget());
    }

    // optional uint64 size = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestPayload_FileMapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContentManifestPayload_FileMapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestPayload_FileMapping::GetClassData() const { return &_class_data_; }


void ContentManifestPayload_FileMapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContentManifestPayload_FileMapping*>(&to_msg);
  auto& from = static_cast<const ContentManifestPayload_FileMapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload.FileMapping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunks_.MergeFrom(from._impl_.chunks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sha_filename(from._internal_sha_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_sha_content(from._internal_sha_content());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_linktarget(from._internal_linktarget());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestPayload_FileMapping::CopyFrom(const ContentManifestPayload_FileMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload.FileMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping::IsInitialized() const {
  return true;
}

void ContentManifestPayload_FileMapping::InternalSwap(ContentManifestPayload_FileMapping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.chunks_.InternalSwap(&other->_impl_.chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha_filename_, lhs_arena,
      &other->_impl_.sha_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha_content_, lhs_arena,
      &other->_impl_.sha_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linktarget_, lhs_arena,
      &other->_impl_.linktarget_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentManifestPayload_FileMapping, _impl_.flags_)
      + sizeof(ContentManifestPayload_FileMapping::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(ContentManifestPayload_FileMapping, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestPayload_FileMapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[1]);
}

// ===================================================================

class ContentManifestPayload::_Internal {
 public:
};

ContentManifestPayload::ContentManifestPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContentManifestPayload)
}
ContentManifestPayload::ContentManifestPayload(const ContentManifestPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContentManifestPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mappings_){from._impl_.mappings_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload)
}

inline void ContentManifestPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mappings_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContentManifestPayload::~ContentManifestPayload() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentManifestPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mappings_.~RepeatedPtrField();
}

void ContentManifestPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContentManifestPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mappings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ContentManifestPayload.FileMapping mappings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mappings_size()); i < n; i++) {
    const auto& repfield = this->_internal_mappings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload)
  return target;
}

size_t ContentManifestPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  total_size += 1UL * this->_internal_mappings_size();
  for (const auto& msg : this->_impl_.mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContentManifestPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestPayload::GetClassData() const { return &_class_data_; }


void ContentManifestPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContentManifestPayload*>(&to_msg);
  auto& from = static_cast<const ContentManifestPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mappings_.MergeFrom(from._impl_.mappings_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestPayload::CopyFrom(const ContentManifestPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload::IsInitialized() const {
  return true;
}

void ContentManifestPayload::InternalSwap(ContentManifestPayload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mappings_.InternalSwap(&other->_impl_.mappings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[2]);
}

// ===================================================================

class ContentManifestMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentManifestMetadata>()._impl_._has_bits_);
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gid_manifest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filenames_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cb_disk_original(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cb_disk_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unique_chunks(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crc_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_crc_clear(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

ContentManifestMetadata::ContentManifestMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContentManifestMetadata)
}
ContentManifestMetadata::ContentManifestMetadata(const ContentManifestMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContentManifestMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gid_manifest_){}
    , decltype(_impl_.depot_id_){}
    , decltype(_impl_.creation_time_){}
    , decltype(_impl_.cb_disk_original_){}
    , decltype(_impl_.filenames_encrypted_){}
    , decltype(_impl_.unique_chunks_){}
    , decltype(_impl_.cb_disk_compressed_){}
    , decltype(_impl_.crc_encrypted_){}
    , decltype(_impl_.crc_clear_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gid_manifest_, &from._impl_.gid_manifest_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.crc_clear_) -
    reinterpret_cast<char*>(&_impl_.gid_manifest_)) + sizeof(_impl_.crc_clear_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestMetadata)
}

inline void ContentManifestMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gid_manifest_){uint64_t{0u}}
    , decltype(_impl_.depot_id_){0u}
    , decltype(_impl_.creation_time_){0u}
    , decltype(_impl_.cb_disk_original_){uint64_t{0u}}
    , decltype(_impl_.filenames_encrypted_){false}
    , decltype(_impl_.unique_chunks_){0u}
    , decltype(_impl_.cb_disk_compressed_){uint64_t{0u}}
    , decltype(_impl_.crc_encrypted_){0u}
    , decltype(_impl_.crc_clear_){0u}
  };
}

ContentManifestMetadata::~ContentManifestMetadata() {
  // @@protoc_insertion_point(destructor:ContentManifestMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentManifestMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContentManifestMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContentManifestMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.gid_manifest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.crc_encrypted_) -
        reinterpret_cast<char*>(&_impl_.gid_manifest_)) + sizeof(_impl_.crc_encrypted_));
  }
  _impl_.crc_clear_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 depot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depot_id(&has_bits);
          _impl_.depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gid_manifest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gid_manifest(&has_bits);
          _impl_.gid_manifest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creation_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_creation_time(&has_bits);
          _impl_.creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool filenames_encrypted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filenames_encrypted(&has_bits);
          _impl_.filenames_encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cb_disk_original = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cb_disk_original(&has_bits);
          _impl_.cb_disk_original_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cb_disk_compressed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cb_disk_compressed(&has_bits);
          _impl_.cb_disk_compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unique_chunks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_unique_chunks(&has_bits);
          _impl_.unique_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crc_encrypted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_crc_encrypted(&has_bits);
          _impl_.crc_encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crc_clear = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_crc_clear(&has_bits);
          _impl_.crc_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depot_id(), target);
  }

  // optional uint64 gid_manifest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gid_manifest(), target);
  }

  // optional uint32 creation_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_creation_time(), target);
  }

  // optional bool filenames_encrypted = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_filenames_encrypted(), target);
  }

  // optional uint64 cb_disk_original = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_cb_disk_original(), target);
  }

  // optional uint64 cb_disk_compressed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_cb_disk_compressed(), target);
  }

  // optional uint32 unique_chunks = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_unique_chunks(), target);
  }

  // optional uint32 crc_encrypted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_crc_encrypted(), target);
  }

  // optional uint32 crc_clear = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_crc_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestMetadata)
  return target;
}

size_t ContentManifestMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 gid_manifest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gid_manifest());
    }

    // optional uint32 depot_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_depot_id());
    }

    // optional uint32 creation_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creation_time());
    }

    // optional uint64 cb_disk_original = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cb_disk_original());
    }

    // optional bool filenames_encrypted = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 unique_chunks = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_chunks());
    }

    // optional uint64 cb_disk_compressed = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cb_disk_compressed());
    }

    // optional uint32 crc_encrypted = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crc_encrypted());
    }

  }
  // optional uint32 crc_clear = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crc_clear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContentManifestMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestMetadata::GetClassData() const { return &_class_data_; }


void ContentManifestMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContentManifestMetadata*>(&to_msg);
  auto& from = static_cast<const ContentManifestMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gid_manifest_ = from._impl_.gid_manifest_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.depot_id_ = from._impl_.depot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.creation_time_ = from._impl_.creation_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cb_disk_original_ = from._impl_.cb_disk_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.filenames_encrypted_ = from._impl_.filenames_encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.unique_chunks_ = from._impl_.unique_chunks_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.cb_disk_compressed_ = from._impl_.cb_disk_compressed_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.crc_encrypted_ = from._impl_.crc_encrypted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_crc_clear(from._internal_crc_clear());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestMetadata::CopyFrom(const ContentManifestMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestMetadata::IsInitialized() const {
  return true;
}

void ContentManifestMetadata::InternalSwap(ContentManifestMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentManifestMetadata, _impl_.crc_clear_)
      + sizeof(ContentManifestMetadata::_impl_.crc_clear_)
      - PROTOBUF_FIELD_OFFSET(ContentManifestMetadata, _impl_.gid_manifest_)>(
          reinterpret_cast<char*>(&_impl_.gid_manifest_),
          reinterpret_cast<char*>(&other->_impl_.gid_manifest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[3]);
}

// ===================================================================

class ContentManifestSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentManifestSignature>()._impl_._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContentManifestSignature::ContentManifestSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContentManifestSignature)
}
ContentManifestSignature::ContentManifestSignature(const ContentManifestSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContentManifestSignature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ContentManifestSignature)
}

inline void ContentManifestSignature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_){}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContentManifestSignature::~ContentManifestSignature() {
  // @@protoc_insertion_point(destructor:ContentManifestSignature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentManifestSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
}

void ContentManifestSignature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContentManifestSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestSignature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.signature_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestSignature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestSignature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestSignature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestSignature)
  return target;
}

size_t ContentManifestSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestSignature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes signature = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContentManifestSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestSignature::GetClassData() const { return &_class_data_; }


void ContentManifestSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContentManifestSignature*>(&to_msg);
  auto& from = static_cast<const ContentManifestSignature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestSignature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signature()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestSignature::CopyFrom(const ContentManifestSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestSignature::IsInitialized() const {
  return true;
}

void ContentManifestSignature::InternalSwap(ContentManifestSignature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestSignature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[4]);
}

// ===================================================================

class ContentDeltaChunks_DeltaChunk::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentDeltaChunks_DeltaChunk>()._impl_._has_bits_);
  static void set_has_sha_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size_original(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_patch_method(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ContentDeltaChunks_DeltaChunk::ContentDeltaChunks_DeltaChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContentDeltaChunks.DeltaChunk)
}
ContentDeltaChunks_DeltaChunk::ContentDeltaChunks_DeltaChunk(const ContentDeltaChunks_DeltaChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContentDeltaChunks_DeltaChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sha_source_){}
    , decltype(_impl_.sha_target_){}
    , decltype(_impl_.chunk_){}
    , decltype(_impl_.size_original_){}
    , decltype(_impl_.patch_method_){}
    , decltype(_impl_.size_delta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sha_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_source()) {
    _this->_impl_.sha_source_.Set(from._internal_sha_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha_target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_target()) {
    _this->_impl_.sha_target_.Set(from._internal_sha_target(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chunk()) {
    _this->_impl_.chunk_.Set(from._internal_chunk(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_original_, &from._impl_.size_original_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_delta_) -
    reinterpret_cast<char*>(&_impl_.size_original_)) + sizeof(_impl_.size_delta_));
  // @@protoc_insertion_point(copy_constructor:ContentDeltaChunks.DeltaChunk)
}

inline void ContentDeltaChunks_DeltaChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sha_source_){}
    , decltype(_impl_.sha_target_){}
    , decltype(_impl_.chunk_){}
    , decltype(_impl_.size_original_){0u}
    , decltype(_impl_.patch_method_){0u}
    , decltype(_impl_.size_delta_){0u}
  };
  _impl_.sha_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha_target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContentDeltaChunks_DeltaChunk::~ContentDeltaChunks_DeltaChunk() {
  // @@protoc_insertion_point(destructor:ContentDeltaChunks.DeltaChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentDeltaChunks_DeltaChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sha_source_.Destroy();
  _impl_.sha_target_.Destroy();
  _impl_.chunk_.Destroy();
}

void ContentDeltaChunks_DeltaChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContentDeltaChunks_DeltaChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentDeltaChunks.DeltaChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sha_source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sha_target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.chunk_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.size_original_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_delta_) -
        reinterpret_cast<char*>(&_impl_.size_original_)) + sizeof(_impl_.size_delta_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentDeltaChunks_DeltaChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sha_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sha_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sha_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size_original = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size_original(&has_bits);
          _impl_.size_original_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 patch_method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_patch_method(&has_bits);
          _impl_.patch_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes chunk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size_delta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_size_delta(&has_bits);
          _impl_.size_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentDeltaChunks_DeltaChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentDeltaChunks.DeltaChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes sha_source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sha_source(), target);
  }

  // optional bytes sha_target = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha_target(), target);
  }

  // optional uint32 size_original = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size_original(), target);
  }

  // optional uint32 patch_method = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_patch_method(), target);
  }

  // optional bytes chunk = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_chunk(), target);
  }

  // optional uint32 size_delta = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_size_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentDeltaChunks.DeltaChunk)
  return target;
}

size_t ContentDeltaChunks_DeltaChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentDeltaChunks.DeltaChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes sha_source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_source());
    }

    // optional bytes sha_target = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_target());
    }

    // optional bytes chunk = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
    }

    // optional uint32 size_original = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size_original());
    }

    // optional uint32 patch_method = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_patch_method());
    }

    // optional uint32 size_delta = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size_delta());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentDeltaChunks_DeltaChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContentDeltaChunks_DeltaChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentDeltaChunks_DeltaChunk::GetClassData() const { return &_class_data_; }


void ContentDeltaChunks_DeltaChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContentDeltaChunks_DeltaChunk*>(&to_msg);
  auto& from = static_cast<const ContentDeltaChunks_DeltaChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContentDeltaChunks.DeltaChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sha_source(from._internal_sha_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sha_target(from._internal_sha_target());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_chunk(from._internal_chunk());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.size_original_ = from._impl_.size_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.patch_method_ = from._impl_.patch_method_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.size_delta_ = from._impl_.size_delta_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentDeltaChunks_DeltaChunk::CopyFrom(const ContentDeltaChunks_DeltaChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentDeltaChunks.DeltaChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentDeltaChunks_DeltaChunk::IsInitialized() const {
  return true;
}

void ContentDeltaChunks_DeltaChunk::InternalSwap(ContentDeltaChunks_DeltaChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha_source_, lhs_arena,
      &other->_impl_.sha_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha_target_, lhs_arena,
      &other->_impl_.sha_target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chunk_, lhs_arena,
      &other->_impl_.chunk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentDeltaChunks_DeltaChunk, _impl_.size_delta_)
      + sizeof(ContentDeltaChunks_DeltaChunk::_impl_.size_delta_)
      - PROTOBUF_FIELD_OFFSET(ContentDeltaChunks_DeltaChunk, _impl_.size_original_)>(
          reinterpret_cast<char*>(&_impl_.size_original_),
          reinterpret_cast<char*>(&other->_impl_.size_original_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentDeltaChunks_DeltaChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[5]);
}

// ===================================================================

class ContentDeltaChunks::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentDeltaChunks>()._impl_._has_bits_);
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_manifest_id_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manifest_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chunk_data_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ContentDeltaChunks::ContentDeltaChunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ContentDeltaChunks)
}
ContentDeltaChunks::ContentDeltaChunks(const ContentDeltaChunks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContentDeltaChunks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deltachunks_){from._impl_.deltachunks_}
    , decltype(_impl_.manifest_id_source_){}
    , decltype(_impl_.manifest_id_target_){}
    , decltype(_impl_.depot_id_){}
    , decltype(_impl_.chunk_data_location_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.manifest_id_source_, &from._impl_.manifest_id_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chunk_data_location_) -
    reinterpret_cast<char*>(&_impl_.manifest_id_source_)) + sizeof(_impl_.chunk_data_location_));
  // @@protoc_insertion_point(copy_constructor:ContentDeltaChunks)
}

inline void ContentDeltaChunks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deltachunks_){arena}
    , decltype(_impl_.manifest_id_source_){uint64_t{0u}}
    , decltype(_impl_.manifest_id_target_){uint64_t{0u}}
    , decltype(_impl_.depot_id_){0u}
    , decltype(_impl_.chunk_data_location_){0}
  };
}

ContentDeltaChunks::~ContentDeltaChunks() {
  // @@protoc_insertion_point(destructor:ContentDeltaChunks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContentDeltaChunks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deltachunks_.~RepeatedPtrField();
}

void ContentDeltaChunks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContentDeltaChunks::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentDeltaChunks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deltachunks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.manifest_id_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chunk_data_location_) -
        reinterpret_cast<char*>(&_impl_.manifest_id_source_)) + sizeof(_impl_.chunk_data_location_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentDeltaChunks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 depot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depot_id(&has_bits);
          _impl_.depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 manifest_id_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_manifest_id_source(&has_bits);
          _impl_.manifest_id_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 manifest_id_target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_manifest_id_target(&has_bits);
          _impl_.manifest_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deltachunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EContentDeltaChunkDataLocation chunk_data_location = 5 [default = k_EContentDeltaChunkDataLocationInProtobuf];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EContentDeltaChunkDataLocation_IsValid(val))) {
            _internal_set_chunk_data_location(static_cast<::EContentDeltaChunkDataLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentDeltaChunks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentDeltaChunks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depot_id(), target);
  }

  // optional uint64 manifest_id_source = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_manifest_id_source(), target);
  }

  // optional uint64 manifest_id_target = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_manifest_id_target(), target);
  }

  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deltachunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_deltachunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .EContentDeltaChunkDataLocation chunk_data_location = 5 [default = k_EContentDeltaChunkDataLocationInProtobuf];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_chunk_data_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentDeltaChunks)
  return target;
}

size_t ContentDeltaChunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentDeltaChunks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  total_size += 1UL * this->_internal_deltachunks_size();
  for (const auto& msg : this->_impl_.deltachunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 manifest_id_source = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_manifest_id_source());
    }

    // optional uint64 manifest_id_target = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_manifest_id_target());
    }

    // optional uint32 depot_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_depot_id());
    }

    // optional .EContentDeltaChunkDataLocation chunk_data_location = 5 [default = k_EContentDeltaChunkDataLocationInProtobuf];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_chunk_data_location());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentDeltaChunks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContentDeltaChunks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentDeltaChunks::GetClassData() const { return &_class_data_; }


void ContentDeltaChunks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContentDeltaChunks*>(&to_msg);
  auto& from = static_cast<const ContentDeltaChunks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ContentDeltaChunks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.deltachunks_.MergeFrom(from._impl_.deltachunks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.manifest_id_source_ = from._impl_.manifest_id_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.manifest_id_target_ = from._impl_.manifest_id_target_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.depot_id_ = from._impl_.depot_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.chunk_data_location_ = from._impl_.chunk_data_location_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentDeltaChunks::CopyFrom(const ContentDeltaChunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentDeltaChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentDeltaChunks::IsInitialized() const {
  return true;
}

void ContentDeltaChunks::InternalSwap(ContentDeltaChunks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.deltachunks_.InternalSwap(&other->_impl_.deltachunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentDeltaChunks, _impl_.chunk_data_location_)
      + sizeof(ContentDeltaChunks::_impl_.chunk_data_location_)
      - PROTOBUF_FIELD_OFFSET(ContentDeltaChunks, _impl_.manifest_id_source_)>(
          reinterpret_cast<char*>(&_impl_.manifest_id_source_),
          reinterpret_cast<char*>(&other->_impl_.manifest_id_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentDeltaChunks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ContentManifestPayload_FileMapping_ChunkData*
Arena::CreateMaybeMessage< ::ContentManifestPayload_FileMapping_ChunkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestPayload_FileMapping_ChunkData >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentManifestPayload_FileMapping*
Arena::CreateMaybeMessage< ::ContentManifestPayload_FileMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestPayload_FileMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentManifestPayload*
Arena::CreateMaybeMessage< ::ContentManifestPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentManifestMetadata*
Arena::CreateMaybeMessage< ::ContentManifestMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentManifestSignature*
Arena::CreateMaybeMessage< ::ContentManifestSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentDeltaChunks_DeltaChunk*
Arena::CreateMaybeMessage< ::ContentDeltaChunks_DeltaChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentDeltaChunks_DeltaChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentDeltaChunks*
Arena::CreateMaybeMessage< ::ContentDeltaChunks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentDeltaChunks >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
